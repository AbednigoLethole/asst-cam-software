name: ASTT Pipeline

# Triggers the pipeline on every push.
on:
  push:
    branches:
      - '*'

env:
  ASTT_VERSION: 1.1.1

jobs:
  build-image:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if not running against main
        if: ${{ github.ref_name != 'main' }}
        run: echo "Not running against main branch"

      - name: Build the ASTT Docker Image for non-main branch
        if: ${{ github.ref_name != 'main' }}
        run: docker build -t ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}-dev.c${{ github.sha }} .

      - name: Build the ASTT Docker Image for main branch
        if: ${{ github.ref_name == 'main' }}
        run: docker build -t ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }} .

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.ASTT_PASS }}" | docker login ghcr.io --username "${{ secrets.ASTT_USR }}" --password-stdin

      - name: Push the ASTT Docker Image for non-main branch
        if: ${{ github.ref_name != 'main' }}
        run: docker push ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}-dev.c${{ github.sha }}

      - name: Push the ASTT Docker Image for main branch
        if: ${{ github.ref_name == 'main' }}
        run: docker push ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}

  python-lint:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false && poetry install

      - name: Check code quality with isort
        run: isort --check-only --profile black --line-length 70 src/ tests/

      - name: Check code quality with black
        run: black --exclude .+\.ipynb --check --line-length 70 src/ tests/

      - name: Check code quality with flake8
        run: flake8 --show-source --statistics --max-line-length 70 src/ tests/

  acceptance-test:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false && poetry install

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.ASTT_PASS }}" | docker login ghcr.io --username "${{ secrets.ASTT_USR }}" --password-stdin
    
      - name: Pull ASTT simulator image for main branch
        if: ${{ github.ref_name == 'main' }}
        run: docker pull ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}

      - name: Pull ASTT simulator image for non-main branch
        if: ${{ github.ref_name != 'main' }}
        run: docker pull ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}-dev.c${{ github.sha }}

      - name: Add VCAN module
        run: sudo apt-get install linux-modules-extra-$(uname -r)

      - name: Start VCAN Network
        run: sudo sh startVirtualCANInterface.sh

      - name: Run the simulator for main branch
        if: ${{ github.ref_name == 'main' }}
        run: docker run -d --network=host ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }} bash -c "cd src/antenna_simulator && ./slave"

      - name: Run the simulator for non-main branch
        if: ${{ github.ref_name != 'main' }}
        run: docker run -d --network=host ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}-dev.c${{ github.sha }} bash -c "cd src/antenna_simulator && ./slave"

      - name: Run Acceptance Tests
        run: pytest tests/acceptance -v

      - name: Force remove docker image for non-main branch
        if: ${{ github.ref_name != 'main' }}
        run: docker rmi -f ghcr.io/abednigolethole/astt-cam-software:${{ env.ASTT_VERSION }}-dev.c${{ github.sha }}

      - name: Verify non-main docker images are deleted
        run: docker images

  unit-test:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false && poetry install

      - name: Run all unit tests
        run: python -m unittest discover -v -s tests/unit

  docs-build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false && poetry install

      - name: Install Sphinx
        run: pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints canopen flask astropy

      - name: Build the docs
        run: sphinx-build -M html docs docs/build

  publish:
    runs-on: ubuntu-20.04
    needs: acceptance-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish artifact
        run: echo "Will publish the ASTT software."
