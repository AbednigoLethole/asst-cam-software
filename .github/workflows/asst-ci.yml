name: ASTT pipeline

# Triggers the pipeline on every push.
on:
  push:
    branches:
      - '*' 
env:
  ASTT_VERSION: 1.0.0

jobs:
  build-image:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build the ASTT Docker Image
        run: docker build -t ghcr.io/abednigolethole/astt-cam-software:$ASTT_VERSION .

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.ASTT_PASS }}" | docker login ghcr.io --username "${{ secrets.ASTT_USR }}" --password-stdin

      - name: Push the astt docker image to GitHub Container Registry
        run: docker push ghcr.io/abednigolethole/astt-cam-software:$ASTT_VERSION


  python-lint:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry # Installing poetry
        poetry config virtualenvs.create false && poetry install
        
    - name: Checks if the code is of good quality using isort
      run: isort --check-only --profile black --line-length 70 -w 70 src/ tests/

    - name: Checks if the code is of good quality using black
      run: black --exclude .+\.ipynb --check --line-length 70 --line-length 70 src/ tests/

    - name: Checks if the code is of good quality using flake8
      run: flake8 --show-source --statistics --max-line-length 70 --max-line-length=70 src/ tests/

  acceptance-test:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry # Installing poetry
        poetry config virtualenvs.create false && poetry install

    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.ASTT_PASS }}" | docker login ghcr.io --username "${{ secrets.ASTT_USR }}" --password-stdin
    
    - name: Pull image with the ASTT simulator
      run: docker pull ghcr.io/abednigolethole/astt-cam-software:$ASTT_VERSION

    - name: Adding VCAN module
      run: sudo apt-get install linux-modules-extra-$(uname -r)

    - name: Starting VCAN Network
      run: sudo sh startVirtualCANInterface.sh

    - name: Run the simulator
      run: docker run -d --network=host ghcr.io/abednigolethole/astt-cam-software:$ASTT_VERSION bash -c "cd src/antenna_simulator && ./slave"

    - name: Run Acceptance Tests
      run: pytest tests/acceptance -v

  unit-test:
    runs-on: ubuntu-20.04
    needs: build-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false && poetry install

    - name: Run all unit tests
      run: python -m unittest discover -v -s tests/unit


  docs-build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false && poetry install

    - name: Install Sphinx
      run: pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints canopen flask astropy

    - name: builds the docs
      run: sphinx-build -M html docs docs/build

  publish:
    runs-on: ubuntu-20.04
    needs: acceptance-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Publish artifact
      run: echo "Will publish the asst software."
    